I".E<p><strong>Category:</strong> Reversing</p>

<blockquote>
  <p>This program likes to jump!</p>
</blockquote>

<p><a href="https://github.com/MiloTruck/CTF-Archive/tree/master/Timisoara%20CTF%202019%20Qualification%20Round/Reversing/Strange%20Jump%20%5B250%5D" class="btn btn--primary">Challenge Files</a></p>

<h2 id="write-up">Write-up</h2>
<p>Using Ghidra to decompile the binary, notice that there are a lot of functions. Most of the functions in the binary are placed to mislead and distract, and can be ignored. To find the function that contains the flag, look for the string <code class="highlighter-rouge">Yay, you got the flag!\n</code>.</p>

<p>Here’s the simplified decompilation of the function:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alphabets</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>

<span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">input_length</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">input_length</span><span class="p">;</span> <span class="n">a</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">char_one</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">)[</span><span class="n">a</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">char_two</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">)[</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">char_three</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">)[</span><span class="n">a</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span>
    
    <span class="n">bool</span> <span class="n">check</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">b</span><span class="o">++</span><span class="p">){</span>
        <span class="k">if</span> <span class="p">((</span><span class="o">&amp;</span><span class="n">input</span><span class="p">)[</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">]</span> <span class="o">==</span> <span class="s">"</span><span class="se">\0</span><span class="s">"</span><span class="p">)</span> <span class="n">check</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> 
    <span class="p">}</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">c</span><span class="o">--</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">d</span><span class="o">--</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">d</span><span class="o">+</span><span class="n">c</span><span class="o">*</span><span class="mi">6</span> <span class="o">&amp;</span> <span class="mh">0x1f</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">char_one</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">char_two</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">char_three</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&amp;</span> <span class="mh">0x1f</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">check</span> <span class="o">==</span> <span class="nb">true</span><span class="p">)</span> <span class="n">ciphertext</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">==</span> <span class="s">"A"</span><span class="p">;</span>
            <span class="k">else</span> <span class="n">ciphertext</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">==</span> <span class="s">"="</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">ciphertext</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">==</span> <span class="n">alphabets</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
        <span class="p">}</span>
        
        <span class="n">e</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">ciphertext_length</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">);</span>
<span class="kt">int</span> <span class="n">final_length</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="o">&amp;</span><span class="n">final</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">ciphertext_length</span> <span class="o">==</span> <span class="n">final_length</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">){</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">final</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">==</span> <span class="s">"</span><span class="se">\0</span><span class="s">"</span><span class="p">)</span> <span class="n">puts</span><span class="p">(</span><span class="s">"Yay! You got the flag!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">final</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">!=</span> <span class="n">ciphertext</span><span class="p">[</span><span class="n">a</span><span class="p">])</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The function is similar to the reversing challenge <strong>Math</strong>, but without a key. The flag can be obtained by replicating the function above and brute-forcing for the flag. This method tries every possible combination for every block of 3 characters in the flag, which can be done in reasonable time.</p>

<p>Here’s the final code to solve the challenge:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">final</span> <span class="o">=</span> <span class="p">[</span><span class="mi">86</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">57</span><span class="p">]</span>
<span class="n">alphabets</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>
<span class="n">chars</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_</span><span class="si">\</span><span class="err">{</span><span class="se">\</span><span class="s">}"</span> 

<span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">final</span><span class="p">)</span>

<span class="n">flag</span> <span class="o">=</span> <span class="s">''</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">trip</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">final</span><span class="p">),</span><span class="mi">2</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">fi</span> <span class="ow">in</span> <span class="n">chars</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">se</span> <span class="ow">in</span> <span class="n">chars</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">th</span> <span class="ow">in</span> <span class="n">chars</span><span class="p">:</span>
                <span class="n">a</span> <span class="o">=</span> <span class="p">((</span><span class="nb">ord</span><span class="p">(</span><span class="n">fi</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">|</span> <span class="nb">ord</span><span class="p">(</span><span class="n">se</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">|</span> <span class="nb">ord</span><span class="p">(</span><span class="n">th</span><span class="p">))</span>
                
                <span class="n">test</span> <span class="o">=</span> <span class="p">[]</span>

                <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>
                    <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                        <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="n">k</span><span class="o">*</span><span class="mi">6</span> <span class="o">&amp;</span> <span class="mh">0x1f</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">):</span>
                            <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">m</span> <span class="o">&amp;</span> <span class="mh">0x1f</span><span class="p">))</span>
                    <span class="n">test</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">alphabets</span><span class="p">[</span><span class="n">t</span><span class="p">])</span>

                <span class="k">if</span> <span class="nb">chr</span><span class="p">(</span><span class="n">final</span><span class="p">[</span><span class="n">count</span><span class="p">])</span> <span class="o">==</span> <span class="n">test</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">and</span> <span class="nb">chr</span><span class="p">(</span><span class="n">final</span><span class="p">[</span><span class="n">count</span><span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="n">test</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">and</span> <span class="nb">chr</span><span class="p">(</span><span class="n">final</span><span class="p">[</span><span class="n">count</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span> <span class="o">==</span> <span class="n">test</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="ow">and</span> <span class="nb">chr</span><span class="p">(</span><span class="n">final</span><span class="p">[</span><span class="n">count</span><span class="o">+</span><span class="mi">3</span><span class="p">])</span> <span class="o">==</span> <span class="n">test</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span>
                    <span class="k">print</span> <span class="n">fi</span> <span class="o">+</span> <span class="n">se</span> <span class="o">+</span> <span class="n">th</span>
                    <span class="n">flag</span> <span class="o">+=</span> <span class="n">fi</span> <span class="o">+</span> <span class="n">se</span> <span class="o">+</span> <span class="n">th</span>
                    <span class="k">break</span>

    <span class="n">count</span> <span class="o">+=</span> <span class="mi">2</span>

<span class="k">print</span> <span class="n">flag</span>
</code></pre></div></div>

<p><strong>Flag:</strong> TIMCTF{deC3pt1ve_ExceP0ti0n_h4ndLer}</p>
:ET