I"¶Y<p><strong>Category:</strong> Reversing</p>

<blockquote>
  <p>You have stumbled across a interesting piece of code with seemingly random letters and numbers, can you help find what the key is?</p>
</blockquote>

<p>Hint:</p>
<blockquote>
  <p>Slowly analyse the vm, try making sense of what each instruction does</p>
</blockquote>

<p><a href="https://github.com/MiloTruck/CTF-Archive/tree/master/HATS%20CTF/Reversing/babyvm-re%20%5B500%5D" class="btn btn--primary">Challenge Files</a></p>

<h2 id="write-up">Write-up</h2>
<p>As usual, we run the binary provided first:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter the key
aaaa
Verifying
Wrong key!
</code></pre></div></div>

<p>The binary seems to ask for a key, which can be assumed to be the flag. It then checks if the key is correct and outputs <code class="highlighter-rouge">Wrong key!</code> if the key is incorrect.</p>

<p>Next, we analyze the source code:</p>

<p>Part of the code in <strong>main</strong>:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">101</span><span class="p">]</span><span class="o">=</span><span class="p">{},</span>
     <span class="n">stack</span><span class="p">[</span><span class="mi">101</span><span class="p">]</span><span class="o">=</span><span class="p">{},</span>
     <span class="n">input</span><span class="p">[</span><span class="mi">1337</span><span class="p">]</span><span class="o">=</span><span class="p">{},</span>
     <span class="n">code1</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"2u4mmimmiup2u6mimimimup2u7mmimmup2u6mmimmiup2u7mmmimup2u4mmmup2u7mmimmup2u6mimmmup2u6mmimmiup2u4mmmup2u6mimmimiup2u6mmimmiup2u7mimmmiup2u5mup"</span><span class="p">,</span>
     <span class="n">code2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"2u5mmimimup2u6mmimmiup2u7mmmimup2u6mimmmiup2u6mmimimup2u7mimmmiup2u6mimmmiup2u6mimimimup2u6mmimimiup2u5mup"</span><span class="p">,</span>
     <span class="n">code3</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"0r2u6mmr2u6mmimmiu0r2u5mimir2u5mmmu0r2u5mimr2u4mmmiu0r2u5mmir2u5mmmimiu0r2u5mmr2u4mimmiu0r2u4mimir2u7mimu0r2u4mimr2u6mmmmu0r2u4mmir2u4mimimimu0r2u4mmr2u5mimimimu0r2u7mir2u6mmimimu0r2u7mr2u5mimmmu0r2u6mir2u5mmmimu0r2u6mr2u5mmmiu0r2u5mir2u4mimimu0r2u5mr2u5mmimmiu9r2u5mmimu8r2u6mimmimu7r2u5mimmmu6r2u6mmimimiu5r2u7mmmmiu4r2u7mmimimiu3r2u5mmmmu2r2u5mmmimu1r2u4mmmmu0r2u4mimmmu"</span><span class="p">,</span>
     <span class="n">code4</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"2u5mmimimiup2u7mmmimup2u6mimimimiup2u6mimimimup2u6mmimimiup2u4mmmup2u6mimmimiup2u6mmimmiup2u7mimmmiup2u4mmmiup2u5mup"</span><span class="p">,</span>
     <span class="n">code5</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"2u4mmimimup2u6mimimmup2u6mmmmiup2u6mmimimiup2u4mmmup2u7mmimup2u4mmmup"</span><span class="p">;</span>
</code></pre></div></div>
<p>As seen in the <strong>main</strong> function, The binary works by writing special lines of code, named <code class="highlighter-rouge">code1[]</code> to <code class="highlighter-rouge">code5[]</code>, and passing them through the <strong>vmstep</strong> function with buffers to be written to, such as <code class="highlighter-rouge">stack</code> or <code class="highlighter-rouge">key</code>. We can see that <code class="highlighter-rouge">code1[]</code>, <code class="highlighter-rouge">code2[]</code>, <code class="highlighter-rouge">code4[]</code> and <code class="highlighter-rouge">code5[]</code> are used to output statements after running the binary.</p>

<p><strong>vmstep</strong> function:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">int</span> <span class="nf">vmstep</span><span class="p">(</span><span class="kt">char</span> <span class="n">op</span><span class="p">,</span><span class="kt">char</span><span class="o">*</span> <span class="n">stack</span><span class="p">){</span>
    <span class="k">switch</span><span class="p">(</span><span class="n">op</span> <span class="o">|</span> <span class="mh">0x20</span><span class="p">){</span>
        <span class="k">case</span> <span class="sc">'0'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'1'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'2'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'3'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'4'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'5'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'6'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'7'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'8'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'9'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">=</span> <span class="p">(</span><span class="n">op</span> <span class="o">|</span> <span class="mh">0x20</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x30</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'a'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">+=</span> <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'d'</span><span class="p">:</span>
            <span class="o">--</span><span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">' '</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'e'</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'i'</span><span class="p">:</span>
            <span class="o">++</span><span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'j'</span><span class="p">:</span>
            <span class="n">ip</span> <span class="o">+=</span> <span class="n">ax</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'m'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">*=</span> <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'p'</span><span class="p">:</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%c"</span><span class="p">,</span><span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">]);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'r'</span><span class="p">:</span>
            <span class="n">sp</span> <span class="o">=</span> <span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'s'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">-=</span> <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'u'</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">]</span> <span class="o">=</span> <span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'z'</span><span class="p">:</span>
            <span class="k">if</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">ip</span> <span class="o">+=</span> <span class="n">ax</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="nl">default:</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There are 4 special variables that are used in <strong>vmstep</strong> and <strong>vmexec</strong>:</p>
<ul>
  <li><code class="highlighter-rouge">ip</code> represents the instruction pointer, basically a variable to count the number of instructions.</li>
  <li><code class="highlighter-rouge">sp</code> is the stack pointer, which is used to overwrite/change values in the stack</li>
  <li><code class="highlighter-rouge">ax</code> is the AX register, used to perform instructions such as changing the value of <code class="highlighter-rouge">sp</code> or the values in the stack</li>
  <li><code class="highlighter-rouge">stack</code> represents the buffer that is passed into the functions, namely the <code class="highlighter-rouge">key</code> or <code class="highlighter-rouge">stack</code> in <strong>main</strong>. Memory in these buffers will be changed.</li>
</ul>

<p>Each letter or character in the codes represents an instruction that changes one of these 4 variables in some way. For example, <code class="highlighter-rouge">p</code> is used to execute <code class="highlighter-rouge">printf("%c", stack[sp])</code>.</p>

<p>Part of the code in <strong>main</strong>:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">vmexec</span><span class="p">(</span><span class="n">code1</span><span class="p">,</span><span class="n">stack</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%1337s"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">input</span><span class="p">);</span>
    <span class="n">vmexec</span><span class="p">(</span><span class="n">code2</span><span class="p">,</span><span class="n">stack</span><span class="p">);</span>
    <span class="n">vmexec</span><span class="p">(</span><span class="n">input</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
    <span class="n">vmexec</span><span class="p">(</span><span class="n">code3</span><span class="p">,</span><span class="n">stack</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'\x00'</span> <span class="o">&amp;&amp;</span> <span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'\x00'</span><span class="p">){</span>
            <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">i</span><span class="p">){</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>In the above code, the binary stores our input in <code class="highlighter-rouge">key</code>. <code class="highlighter-rouge">vmexec(code3,stack);</code> then changes the values in the <code class="highlighter-rouge">stack</code>. The binary proceeds to check if <code class="highlighter-rouge">key[i]</code> is equal to <code class="highlighter-rouge">stack[i] + i</code>. As <code class="highlighter-rouge">key</code> is the flag, we can assume that <code class="highlighter-rouge">stack[i] + i</code> represents each individual character code in the flag after <code class="highlighter-rouge">vmexec(code3,stack);</code> is run.</p>

<p>To solve the challenge, we simply run <code class="highlighter-rouge">vmexec(code3, stack);</code> and print out the ASCII characters represented by <code class="highlighter-rouge">stack[i] + i</code>. Below is the final code to solve the challenge:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 
<span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="n">ip</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">sp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">ax</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">vmstep</span><span class="p">(</span><span class="kt">char</span> <span class="n">op</span><span class="p">,</span><span class="kt">char</span><span class="o">*</span> <span class="n">stack</span><span class="p">){</span>
    <span class="k">switch</span><span class="p">(</span><span class="n">op</span> <span class="o">|</span> <span class="mh">0x20</span><span class="p">){</span>
        <span class="k">case</span> <span class="sc">'0'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'1'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'2'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'3'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'4'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'5'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'6'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'7'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'8'</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'9'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">=</span> <span class="p">(</span><span class="n">op</span> <span class="o">|</span> <span class="mh">0x20</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x30</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'a'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">+=</span> <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'d'</span><span class="p">:</span>
            <span class="o">--</span><span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">' '</span><span class="p">:</span>
        <span class="k">case</span> <span class="sc">'e'</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'i'</span><span class="p">:</span>
            <span class="o">++</span><span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'j'</span><span class="p">:</span>
            <span class="n">ip</span> <span class="o">+=</span> <span class="n">ax</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'m'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">*=</span> <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'p'</span><span class="p">:</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%c"</span><span class="p">,</span><span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">]);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'r'</span><span class="p">:</span>
            <span class="n">sp</span> <span class="o">=</span> <span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'s'</span><span class="p">:</span>
            <span class="n">ax</span> <span class="o">-=</span> <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'u'</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">]</span> <span class="o">=</span> <span class="n">ax</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'z'</span><span class="p">:</span>
            <span class="k">if</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="n">sp</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">ip</span> <span class="o">+=</span> <span class="n">ax</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="nl">default:</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">vmexec</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">code</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">stack</span><span class="p">){</span>
    <span class="n">ip</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">vmstep</span><span class="p">(</span><span class="n">code</span><span class="p">[</span><span class="n">ip</span><span class="p">],</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="o">++</span><span class="n">ip</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">char</span> <span class="n">code3</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"0r2u6mmr2u6mmimmiu0r2u5mimir2u5mmmu0r2u5mimr2u4mmmiu0r2u5mmir2u5mmmimiu0r2u5mmr2u4mimmiu0r2u4mimir2u7mimu0r2u4mimr2u6mmmmu0r2u4mmir2u4mimimimu0r2u4mmr2u5mimimimu0r2u7mir2u6mmimimu0r2u7mr2u5mimmmu0r2u6mir2u5mmmimu0r2u6mr2u5mmmiu0r2u5mir2u4mimimu0r2u5mr2u5mmimmiu9r2u5mmimu8r2u6mimmimu7r2u5mimmmu6r2u6mmimimiu5r2u7mmmmiu4r2u7mmimimiu3r2u5mmmmu2r2u5mmmimu1r2u4mmmmu0r2u4mimmmu"</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">stack</span><span class="p">[</span><span class="mi">101</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span>
    
    <span class="n">vmexec</span><span class="p">(</span><span class="n">code3</span><span class="p">,</span><span class="n">stack</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">"%c"</span><span class="p">,</span> <span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Flag:</strong> HATS{vm_r3_15_fun_r19h7?}</p>
:ET